import { Box } from '@mui/material';

export default function MainPageInfo() {
  return (
    <Box>
      Необходимо создать масштабируемый SPA регистрации с двумя шагами и
      неизменным url. Сайт должен быть адаптивным и корректно отображаться на
      разных устройствах. Приложение должно иметь понятный код и архитектуру.
      Требуемые технологии: ReactJS Redux / React Context Styled components /
      scc modules (можно что-то другое) Любой css фреймворк Можно использовать
      TypeScript Условия следующие: 1. Шапка и футер должны быть высотой не
      более 200px, содержать векторное лого и быть “приклеены” к верху и низу
      страницы соответственно. 2. Под шапкой должны находится хлебные крошки,
      показывающие текущий этап прохождения регистрации (SignUpInfo /
      PersonalInfo). 3. На элементах форм необходимо использовать controlled и
      uncontrolled компоненты. 4. Переход на следующий шаг должен быть после
      валидации, которая хранится в JSON Schema (см. ниже, это stub на
      предполагаемый ответ сервера при инициализации приложения). 5. Приложение
      должно работать при изменении JSON Schema (см. ниже). 6. После заполнения
      анкеты отобразить модальное окно с заполненной информацией. Содержание
      SignUpInfo: Mobile phone (маскированный инпут) Email (email инпут)
      Password (инпут пароль) Repeat Password (должно совпадать с Password) Next
      (кнопка для валидации и перехода на следующий этап) Содержание
      PersonalInfo: First Name (текстовый инпут) Last Name (текстовый инпут) Sex
      (радиогруппа) Birthday (3 инпут формата DD MM YYYY) Your Favorite Ocean
      (селект, элементы приходят в JSON SCHEMA) Hobby (группа чекбоксов с
      возможностью выбора нескольких элементов, элементы приходят в JSON SCHEMA)
      Change SignUp Information (кнопка, позволяющая изменить данные с первого
      шага) Complete (кнопка завершения регистрации, по нажатию на которую
      показывается модальное окно с заполненной анкетой) Необходимо создать
      масштабируемый SPA регистрации с двумя шагами и неизменным url. Сайт
      должен быть адаптивным и корректно отображаться на разных устройствах.
      Приложение должно иметь понятный код и архитектуру. Требуемые технологии:
      ReactJS Redux / React Context Styled components / scc modules (можно
      что-то другое) Любой css фреймворк Можно использовать TypeScript Условия
      следующие: 1. Шапка и футер должны быть высотой не более 200px, содержать
      векторное лого и быть “приклеены” к верху и низу страницы соответственно.
      2. Под шапкой должны находится хлебные крошки, показывающие текущий этап
      прохождения регистрации (SignUpInfo / PersonalInfo). 3. На элементах форм
      необходимо использовать controlled и uncontrolled компоненты. 4. Переход
      на следующий шаг должен быть после валидации, которая хранится в JSON
      Schema (см. ниже, это stub на предполагаемый ответ сервера при
      инициализации приложения). 5. Приложение должно работать при изменении
      JSON Schema (см. ниже). 6. После заполнения анкеты отобразить модальное
      окно с заполненной информацией. Содержание SignUpInfo: Mobile phone
      (маскированный инпут) Email (email инпут) Password (инпут пароль) Repeat
      Password (должно совпадать с Password) Next (кнопка для валидации и
      перехода на следующий этап) Содержание PersonalInfo: First Name (текстовый
      инпут) Last Name (текстовый инпут) Sex (радиогруппа) Birthday (3 инпут
      формата DD MM YYYY) Your Favorite Ocean (селект, элементы приходят в JSON
      SCHEMA) Hobby (группа чекбоксов с возможностью выбора нескольких
      элементов, элементы приходят в JSON SCHEMA) Change SignUp Information
      (кнопка, позволяющая изменить данные с первого шага) Complete (кнопка
      завершения регистрации, по нажатию на которую показывается модальное окно
      с заполненной анкетой) Необходимо создать масштабируемый SPA регистрации с
      двумя шагами и неизменным url. Сайт должен быть адаптивным и корректно
      отображаться на разных устройствах. Приложение должно иметь понятный код и
      архитектуру. Требуемые технологии: ReactJS Redux / React Context Styled
      components / scc modules (можно что-то другое) Любой css фреймворк Можно
      использовать TypeScript Условия следующие: 1. Шапка и футер должны быть
      высотой не более 200px, содержать векторное лого и быть “приклеены” к
      верху и низу страницы соответственно. 2. Под шапкой должны находится
      хлебные крошки, показывающие текущий этап прохождения регистрации
      (SignUpInfo / PersonalInfo). 3. На элементах форм необходимо использовать
      controlled и uncontrolled компоненты. 4. Переход на следующий шаг должен
      быть после валидации, которая хранится в JSON Schema (см. ниже, это stub
      на предполагаемый ответ сервера при инициализации приложения). 5.
      Приложение должно работать при изменении JSON Schema (см. ниже). 6. После
      заполнения анкеты отобразить модальное окно с заполненной информацией.
      Содержание SignUpInfo: Mobile phone (маскированный инпут) Email (email
      инпут) Password (инпут пароль) Repeat Password (должно совпадать с
      Password) Next (кнопка для валидации и перехода на следующий этап)
      Содержание PersonalInfo: First Name (текстовый инпут) Last Name (текстовый
      инпут) Sex (радиогруппа) Birthday (3 инпут формата DD MM YYYY) Your
      Favorite Ocean (селект, элементы приходят в JSON SCHEMA) Hobby (группа
      чекбоксов с возможностью выбора нескольких элементов, элементы приходят в
      JSON SCHEMA) Change SignUp Information (кнопка, позволяющая изменить
      данные с первого шага) Complete (кнопка завершения регистрации, по нажатию
      на которую показывается модальное окно с заполненной анкетой) Необходимо
      создать масштабируемый SPA регистрации с двумя шагами и неизменным url.
      Сайт должен быть адаптивным и корректно отображаться на разных
      устройствах. Приложение должно иметь понятный код и архитектуру. Требуемые
      технологии: ReactJS Redux / React Context Styled components / scc modules
      (можно что-то другое) Любой css фреймворк Можно использовать TypeScript
      Условия следующие: 1. Шапка и футер должны быть высотой не более 200px,
      содержать векторное лого и быть “приклеены” к верху и низу страницы
      соответственно. 2. Под шапкой должны находится хлебные крошки,
      показывающие текущий этап прохождения регистрации (SignUpInfo /
      PersonalInfo). 3. На элементах форм необходимо использовать controlled и
      uncontrolled компоненты. 4. Переход на следующий шаг должен быть после
      валидации, которая хранится в JSON Schema (см. ниже, это stub на
      предполагаемый ответ сервера при инициализации приложения). 5. Приложение
      должно работать при изменении JSON Schema (см. ниже). 6. После заполнения
      анкеты отобразить модальное окно с заполненной информацией. Содержание
      SignUpInfo: Mobile phone (маскированный инпут) Email (email инпут)
      Password (инпут пароль) Repeat Password (должно совпадать с Password) Next
      (кнопка для валидации и перехода на следующий этап) Содержание
      PersonalInfo: First Name (текстовый инпут) Last Name (текстовый инпут) Sex
      (радиогруппа) Birthday (3 инпут формата DD MM YYYY) Your Favorite Ocean
      (селект, элементы приходят в JSON SCHEMA) Hobby (группа чекбоксов с
      возможностью выбора нескольких элементов, элементы приходят в JSON SCHEMA)
      Change SignUp Information (кнопка, позволяющая изменить данные с первого
      шага) Complete (кнопка завершения регистрации, по нажатию на которую
      показывается модальное окно с заполненной анкетой) Необходимо создать
      масштабируемый SPA регистрации с двумя шагами и неизменным url. Сайт
      должен быть адаптивным и корректно отображаться на разных устройствах.
      Приложение должно иметь понятный код и архитектуру. Требуемые технологии:
      ReactJS Redux / React Context Styled components / scc modules (можно
      что-то другое) Любой css фреймворк Можно использовать TypeScript Условия
      следующие: 1. Шапка и футер должны быть высотой не более 200px, содержать
      векторное лого и быть “приклеены” к верху и низу страницы соответственно.
      2. Под шапкой должны находится хлебные крошки, показывающие текущий этап
      прохождения регистрации (SignUpInfo / PersonalInfo). 3. На элементах форм
      необходимо использовать controlled и uncontrolled компоненты. 4. Переход
      на следующий шаг должен быть после валидации, которая хранится в JSON
      Schema (см. ниже, это stub на предполагаемый ответ сервера при
      инициализации приложения). 5. Приложение должно работать при изменении
      JSON Schema (см. ниже). 6. После заполнения анкеты отобразить модальное
      окно с заполненной информацией. Содержание SignUpInfo: Mobile phone
      (маскированный инпут) Email (email инпут) Password (инпут пароль) Repeat
      Password (должно совпадать с Password) Next (кнопка для валидации и
      перехода на следующий этап) Содержание PersonalInfo: First Name (текстовый
      инпут) Last Name (текстовый инпут) Sex (радиогруппа) Birthday (3 инпут
      формата DD MM YYYY) Your Favorite Ocean (селект, элементы приходят в JSON
      SCHEMA) Hobby (группа чекбоксов с возможностью выбора нескольких
      элементов, элементы приходят в JSON SCHEMA) Change SignUp Information
      (кнопка, позволяющая изменить данные с первого шага) Complete (кнопка
      завершения регистрации, по нажатию на которую показывается модальное окно
      с заполненной анкетой) Необходимо создать масштабируемый SPA регистрации с
      двумя шагами и неизменным url. Сайт должен быть адаптивным и корректно
      отображаться на разных устройствах. Приложение должно иметь понятный код и
      архитектуру. Требуемые технологии: ReactJS Redux / React Context Styled
      components / scc modules (можно что-то другое) Любой css фреймворк Можно
      использовать TypeScript Условия следующие: 1. Шапка и футер должны быть
      высотой не более 200px, содержать векторное лого и быть “приклеены” к
      верху и низу страницы соответственно. 2. Под шапкой должны находится
      хлебные крошки, показывающие текущий этап прохождения регистрации
      (SignUpInfo / PersonalInfo). 3. На элементах форм необходимо использовать
      controlled и uncontrolled компоненты. 4. Переход на следующий шаг должен
      быть после валидации, которая хранится в JSON Schema (см. ниже, это stub
      на предполагаемый ответ сервера при инициализации приложения). 5.
      Приложение должно работать при изменении JSON Schema (см. ниже). 6. После
      заполнения анкеты отобразить модальное окно с заполненной информацией.
      Содержание SignUpInfo: Mobile phone (маскированный инпут) Email (email
      инпут) Password (инпут пароль) Repeat Password (должно совпадать с
      Password) Next (кнопка для валидации и перехода на следующий этап)
      Содержание PersonalInfo: First Name (текстовый инпут) Last Name (текстовый
      инпут) Sex (радиогруппа) Birthday (3 инпут формата DD MM YYYY) Your
      Favorite Ocean (селект, элементы приходят в JSON SCHEMA) Hobby (группа
      чекбоксов с возможностью выбора нескольких элементов, элементы приходят в
      JSON SCHEMA) Change SignUp Information (кнопка, позволяющая изменить
      данные с первого шага) Complete (кнопка завершения регистрации, по нажатию
      на которую показывается модальное окно с заполненной анкетой) Необходимо
      создать масштабируемый SPA регистрации с двумя шагами и неизменным url.
      Сайт должен быть адаптивным и корректно отображаться на разных
      устройствах. Приложение должно иметь понятный код и архитектуру. Требуемые
      технологии: ReactJS Redux / React Context Styled components / scc modules
      (можно что-то другое) Любой css фреймворк Можно использовать TypeScript
      Условия следующие: 1. Шапка и футер должны быть высотой не более 200px,
      содержать векторное лого и быть “приклеены” к верху и низу страницы
      соответственно. 2. Под шапкой должны находится хлебные крошки,
      показывающие текущий этап прохождения регистрации (SignUpInfo /
      PersonalInfo). 3. На элементах форм необходимо использовать controlled и
      uncontrolled компоненты. 4. Переход на следующий шаг должен быть после
      валидации, которая хранится в JSON Schema (см. ниже, это stub на
      предполагаемый ответ сервера при инициализации приложения). 5. Приложение
      должно работать при изменении JSON Schema (см. ниже). 6. После заполнения
      анкеты отобразить модальное окно с заполненной информацией. Содержание
      SignUpInfo: Mobile phone (маскированный инпут) Email (email инпут)
      Password (инпут пароль) Repeat Password (должно совпадать с Password) Next
      (кнопка для валидации и перехода на следующий этап) Содержание
      PersonalInfo: First Name (текстовый инпут) Last Name (текстовый инпут) Sex
      (радиогруппа) Birthday (3 инпут формата DD MM YYYY) Your Favorite Ocean
      (селект, элементы приходят в JSON SCHEMA) Hobby (группа чекбоксов с
      возможностью выбора нескольких элементов, элементы приходят в JSON SCHEMA)
      Change SignUp Information (кнопка, позволяющая изменить данные с первого
      шага) Complete (кнопка завершения регистрации, по нажатию на которую
      показывается модальное окно с заполненной анкетой)
    </Box>
  );
}
